/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// AfterCompletionApplyConfiguration represents an declarative configuration of the AfterCompletion type for use
// with apply.
type AfterCompletionApplyConfiguration struct {
	AddClusterLabels    map[string]string `json:"addClusterLabels,omitempty"`
	DeleteClusterLabels map[string]string `json:"deleteClusterLabels,omitempty"`
	DeleteObjects       *bool             `json:"deleteObjects,omitempty"`
}

// AfterCompletionApplyConfiguration constructs an declarative configuration of the AfterCompletion type for use with
// apply.
func AfterCompletion() *AfterCompletionApplyConfiguration {
	return &AfterCompletionApplyConfiguration{}
}

// WithAddClusterLabels puts the entries into the AddClusterLabels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the AddClusterLabels field,
// overwriting an existing map entries in AddClusterLabels field with the same key.
func (b *AfterCompletionApplyConfiguration) WithAddClusterLabels(entries map[string]string) *AfterCompletionApplyConfiguration {
	if b.AddClusterLabels == nil && len(entries) > 0 {
		b.AddClusterLabels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.AddClusterLabels[k] = v
	}
	return b
}

// WithDeleteClusterLabels puts the entries into the DeleteClusterLabels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the DeleteClusterLabels field,
// overwriting an existing map entries in DeleteClusterLabels field with the same key.
func (b *AfterCompletionApplyConfiguration) WithDeleteClusterLabels(entries map[string]string) *AfterCompletionApplyConfiguration {
	if b.DeleteClusterLabels == nil && len(entries) > 0 {
		b.DeleteClusterLabels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.DeleteClusterLabels[k] = v
	}
	return b
}

// WithDeleteObjects sets the DeleteObjects field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DeleteObjects field is set to the value of the last call.
func (b *AfterCompletionApplyConfiguration) WithDeleteObjects(value bool) *AfterCompletionApplyConfiguration {
	b.DeleteObjects = &value
	return b
}
