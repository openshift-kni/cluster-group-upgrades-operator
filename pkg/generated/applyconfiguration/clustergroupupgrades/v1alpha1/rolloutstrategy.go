/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// RolloutStrategyApplyConfiguration represents an declarative configuration of the RolloutStrategy type for use
// with apply.
type RolloutStrategyApplyConfiguration struct {
	MaxConcurrency *int `json:"maxConcurrency,omitempty"`
	Timeout        *int `json:"timeout,omitempty"`
}

// RolloutStrategyApplyConfiguration constructs an declarative configuration of the RolloutStrategy type for use with
// apply.
func RolloutStrategy() *RolloutStrategyApplyConfiguration {
	return &RolloutStrategyApplyConfiguration{}
}

// WithMaxConcurrency sets the MaxConcurrency field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MaxConcurrency field is set to the value of the last call.
func (b *RolloutStrategyApplyConfiguration) WithMaxConcurrency(value int) *RolloutStrategyApplyConfiguration {
	b.MaxConcurrency = &value
	return b
}

// WithTimeout sets the Timeout field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Timeout field is set to the value of the last call.
func (b *RolloutStrategyApplyConfiguration) WithTimeout(value int) *RolloutStrategyApplyConfiguration {
	b.Timeout = &value
	return b
}
