/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// BackupStatusApplyConfiguration represents an declarative configuration of the BackupStatus type for use
// with apply.
type BackupStatusApplyConfiguration struct {
	StartedAt *v1.Time          `json:"startedAt,omitempty"`
	Status    map[string]string `json:"status,omitempty"`
	Clusters  []string          `json:"clusters,omitempty"`
}

// BackupStatusApplyConfiguration constructs an declarative configuration of the BackupStatus type for use with
// apply.
func BackupStatus() *BackupStatusApplyConfiguration {
	return &BackupStatusApplyConfiguration{}
}

// WithStartedAt sets the StartedAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StartedAt field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithStartedAt(value v1.Time) *BackupStatusApplyConfiguration {
	b.StartedAt = &value
	return b
}

// WithStatus puts the entries into the Status field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Status field,
// overwriting an existing map entries in Status field with the same key.
func (b *BackupStatusApplyConfiguration) WithStatus(entries map[string]string) *BackupStatusApplyConfiguration {
	if b.Status == nil && len(entries) > 0 {
		b.Status = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Status[k] = v
	}
	return b
}

// WithClusters adds the given value to the Clusters field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Clusters field.
func (b *BackupStatusApplyConfiguration) WithClusters(values ...string) *BackupStatusApplyConfiguration {
	for i := range values {
		b.Clusters = append(b.Clusters, values[i])
	}
	return b
}
