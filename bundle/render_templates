#!/usr/bin/env bash

set -x

env

curl -L -o ./jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 && chmod 0755 ./jq
curl -L -o ./yq https://github.com/mikefarah/yq/releases/download/v4.16.1/yq_linux_amd64 && chmod 0755 ./yq


# get the required environment variables that are set when merging change sets
source render_vars

# Check for environment variables pertaining to images
if [[ -z "$CI_UPSTREAM_VERSION_SANITIZED" ]] ||
   [[ -z "$CI_TOPOLOGY_AWARE_LIFECYCLE_MANAGER_UPSTREAM_URL" ]] ||
   [[ -z "$CI_TOPOLOGY_AWARE_LIFECYCLE_MANAGER_UPSTREAM_COMMIT" ]] ||
   [[ -z "$CI_TOPOLOGY_AWARE_LIFECYCLE_MANAGER_BUILD_INFO_JSON" ]]; then
  echo "ERROR: All required environment variables not loaded"
  echo "    CI_UPSTREAM_VERSION_SANITIZED"
  echo "    CI_TOPOLOGY_AWARE_LIFECYCLE_MANAGER_UPSTREAM_URL"
  echo "    CI_TOPOLOGY_AWARE_LIFECYCLE_MANAGER_UPSTREAM_COMMIT"
  echo "    CI_TOPOLOGY_AWARE_LIFECYCLE_MANAGER_BUILD_INFO_JSON"
  exit 3
fi

export CSV_NAME="topology-aware-lifecycle-manager.v${CI_VERSION}"

export SUBSCRIPTION_BADGES=$( cat subscription-badges.json)

# Check for environment variables pertaining to the bundle
if [[ -z "$MANIFESTS_DIR" ]] ||
   [[ -z "$METADATA_DIR" ]] ||
   [[ -z "$TESTS_DIR" ]] ||
   [[ -z "$CHANNEL" ]] ||
   [[ -z "$VERSION" ]] ||
   [[ -z "$CI_VERSION" ]]; then
  echo "ERROR: All required environment variables not loaded"
  echo "    MANIFESTS_DIR"
  echo "    METADATA_DIR"
  echo "    TESTS_DIR"
  echo "    SUPPORTED_OCP_VERSIONS"
  echo "    CHANNEL"
  echo "    VERSION"
  echo "    CI_VERSION"
  exit 3
fi

export TOPOLOGY_AWARE_LIFECYCLE_MANAGER_CHANNEL="$CHANNEL"
export TOPOLOGY_AWARE_LIFECYCLE_MANAGER_CHANNELS="$CHANNELS"
export TOPOLOGY_AWARE_LIFECYCLE_MANAGER_DEFAULT_CHANNEL="$DEFAULT_CHANNEL"
export TOPOLOGY_AWARE_LIFECYCLE_MANAGER_DISPLAY_NAME="$DISPLAY_NAME"
export TOPOLOGY_AWARE_LIFECYCLE_MANAGER_DESCRIPTION="$DESCRIPTION"
export TOPOLOGY_AWARE_LIFECYCLE_MANAGER_IMAGE_SHA=$(echo "$CI_TOPOLOGY_AWARE_LIFECYCLE_MANAGER_BUILD_INFO_JSON" | ./jq -r '.extra.image.index.pull[0]')
export TOPOLOGY_AWARE_LIFECYCLE_MANAGER_IMAGE_NVR=$(echo "$CI_TOPOLOGY_AWARE_LIFECYCLE_MANAGER_BUILD_INFO_JSON" | ./jq -r '.extra.image.index.pull[1]')
export TOPOLOGY_AWARE_LIFECYCLE_OPERATOR_PRECACHE_IMAGE_NVR="$CI_TOPOLOGY_AWARE_LIFECYCLE_OPERATOR_PRECACHE_NVR"
export TOPOLOGY_AWARE_LIFECYCLE_OPERATOR_PRECACHE_IMAGE_ENV="$CI_TOPOLOGY_AWARE_LIFECYCLE_OPERATOR_PRECACHE_ENV"
export TOPOLOGY_AWARE_LIFECYCLE_MANAGER="$CI_TOPOLOGY_AWARE_LIFECYCLE_MANAGER"
export KUBE_RBAC_PROXY_NVR="$CI_KUBE_RBAC_PROXY_NVR"

if [[ -z "$TOPOLOGY_AWARE_LIFECYCLE_MANAGER_IMAGE_NVR" ]] ||
   [[ -z "$TOPOLOGY_AWARE_LIFECYCLE_MANAGER_IMAGE_SHA" ]]; then
  echo "ERROR: cannot detect the image from build info"
  echo "$CI_TOPOLOGY_AWARE_LIFECYCLE_MANAGER_BUILD_INFO_JSON"
  exit 4
fi

mv ../bundle/manifests/cluster-group-upgrades-operator.clusterserviceversion.yaml ${MANIFESTS_DIR}/topology-aware-lifecycle-manager.v${CI_VERSION}.clusterserviceversion.yaml

./yq e -i '.spec.install.spec.deployments[0].spec.template.spec.containers[0].image = strenv(KUBE_RBAC_PROXY_NVR)' ${MANIFESTS_DIR}/topology-aware-lifecycle-operator.v${CI_VERSION}.clusterserviceversion.yaml
./yq e -i '.spec.install.spec.deployments[0].spec.template.spec.containers[1].image = strenv(TOPOLOGY_AWARE_LIFECYCLE_OPERATOR_IMAGE_NVR)' ${MANIFESTS_DIR}/topology-aware-lifecycle-operator.v${CI_VERSION}.clusterserviceversion.yaml
./yq e -i '.spec.install.spec.deployments[0].spec.template.spec.containers[1].env[1].name = strenv(TOPOLOGY_AWARE_LIFECYCLE_OPERATOR_PRECACHE_IMAGE_ENV)' ${MANIFESTS_DIR}/topology-aware-lifecycle-operator.v${CI_VERSION}.clusterserviceversion.yaml
./yq e -i '.spec.install.spec.deployments[0].spec.template.spec.containers[1].env[1].value = strenv(TOPOLOGY_AWARE_LIFECYCLE_OPERATOR_PRECACHE_IMAGE_NVR)' ${MANIFESTS_DIR}/topology-aware-lifecycle-operator.v${CI_VERSION}.clusterserviceversion.yaml
./yq e -i '.spec.install.spec.deployments[0].spec.template.spec.containers[1].env[0].value = strenv(TOPOLOGY_AWARE_LIFECYCLE_OPERATOR_PRECACHE_IMAGE_NVR)' ${MANIFESTS_DIR}/topology-aware-lifecycle-operator.v${CI_VERSION}.clusterserviceversion.yaml
./yq e -i '.spec.displayName = strenv(TOPOLOGY_AWARE_LIFECYCLE_MANAGER_DISPLAY_NAME)' ${MANIFESTS_DIR}/topology-aware-lifecycle-operator.v${CI_VERSION}.clusterserviceversion.yaml
./yq e -i '.spec.description = strenv(TOPOLOGY_AWARE_LIFECYCLE_MANAGER_DESCRIPTION)' ${MANIFESTS_DIR}/topology-aware-lifecycle-operator.v${CI_VERSION}.clusterserviceversion.yaml
./yq e -i '.spec.version = strenv(CI_VERSION)' ${MANIFESTS_DIR}/topology-aware-lifecycle-manager.v${CI_VERSION}.clusterserviceversion.yaml
./yq e -i '.metadata.name = strenv(CSV_NAME)' ${MANIFESTS_DIR}/topology-aware-lifecycle-manager.v${CI_VERSION}.clusterserviceversion.yaml
./yq e -i '.metadata.annotations["operators.openshift.io/valid-subscription"] = strenv(SUBSCRIPTION_BADGES)' ${MANIFESTS_DIR}/topology-aware-lifecycle-manager.v${CI_VERSION}.clusterserviceversion.yaml
./yq e -i '.annotations["operators.operatorframework.io.bundle.package.v1"] = strenv(TOPOLOGY_AWARE_LIFECYCLE_MANAGER)' metadata/annotations.yaml
./yq e -i '.annotations["operators.operatorframework.io.bundle.channels.v1"] = strenv(TOPOLOGY_AWARE_LIFECYCLE_MANAGER_CHANNELS)' metadata/annotations.yaml
./yq e -i '.annotations["operators.operatorframework.io.bundle.channel.default.v1"] = strenv(TOPOLOGY_AWARE_LIFECYCLE_MANAGER_DEFAULT_CHANNEL)' metadata/annotations.yaml

rm -rf ./yq ./jq
