apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  creationTimestamp: null
  name: imagebasedgroupupgrades.lcm.openshift.io
spec:
  group: lcm.openshift.io
  names:
    kind: ImageBasedGroupUpgrade
    listKind: ImageBasedGroupUpgradeList
    plural: imagebasedgroupupgrades
    shortNames:
    - ibgu
    singular: imagebasedgroupupgrade
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ImageBasedGroupUpgrade is the schema for upgrading a group of
          clusters using IBU
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: ImageBasedGroupUpgradeSpec defines the desired state of ImageBasedGroupUpgrade
            properties:
              actions:
                description: kubebuilder:validation:XValidation:message="Invalid list
                  of actions", rule="self.map(x,x.action)==['Prep'] || self.map(x,x.action)==['Prep','Upgrade']
                  || self.map(x,x.action)==['Prep','Upgrade','Finalize'] || self.map(x,x.action)==['Rollback']
                  || self.map(x,x.action)==['Rollback', 'Finalize'] || self.map(x,x.action)==['Upgrade']
                  || self.map(x,x.action)==['Upgrade','Finalize'] || self.map(x,x.action)==['Finalize']
                  || self.map(x,x.action)==['Abort'] || self.map(x,x.action)==['Prep',
                  'Abort'] || self.map(x,x.action)==['Prep', 'Upgrade', 'Rollback']
                  || self.map(x,x.action)==['Prep', 'Upgrade', 'Rollback', 'Finalize']
                  || self.map(x,x.action)==['Upgrade','Rollback'] || self.map(x,x.action)==['Upgrade','Rollback','Finalize']"
                items:
                  description: ImageBasedUpgradeAction defines the type of the action
                    to perform. Abort will stop the upgrade by setting the IBU stage
                    to Idle. Finalize will remove the previous stateroot after upgrade
                    is done by setting the IBU stage to Idle. Prep will start preparing
                    the upgrade by setting the IBU stage to Prep. Upgrade will start
                    the upgrade process by setting the IBU stage to Upgrade. Rollback
                    will pivot back to previous stateroot by setting the IBU stage
                    to Rollback.
                  properties:
                    action:
                      enum:
                      - Abort
                      - Prep
                      - Upgrade
                      - Rollback
                      - Finalize
                      type: string
                  required:
                  - action
                  type: object
                maxItems: 4
                type: array
              clusterLabelSelectors:
                items:
                  description: |-
                    A label selector is a label query over a set of resources. The result of matchLabels and
                    matchExpressions are ANDed. An empty label selector matches all objects. A null
                    label selector matches no objects.
                  properties:
                    matchExpressions:
                      description: matchExpressions is a list of label selector requirements.
                        The requirements are ANDed.
                      items:
                        description: |-
                          A label selector requirement is a selector that contains values, a key, and an operator that
                          relates the key and values.
                        properties:
                          key:
                            description: key is the label key that the selector applies
                              to.
                            type: string
                          operator:
                            description: |-
                              operator represents a key's relationship to a set of values.
                              Valid operators are In, NotIn, Exists and DoesNotExist.
                            type: string
                          values:
                            description: |-
                              values is an array of string values. If the operator is In or NotIn,
                              the values array must be non-empty. If the operator is Exists or DoesNotExist,
                              the values array must be empty. This array is replaced during a strategic
                              merge patch.
                            items:
                              type: string
                            type: array
                            x-kubernetes-list-type: atomic
                        required:
                        - key
                        - operator
                        type: object
                      type: array
                      x-kubernetes-list-type: atomic
                    matchLabels:
                      additionalProperties:
                        type: string
                      description: |-
                        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                        map is equivalent to an element of matchExpressions, whose key field is "key", the
                        operator is "In", and the values array contains only "value". The requirements are ANDed.
                      type: object
                  type: object
                  x-kubernetes-map-type: atomic
                type: array
              clusters:
                items:
                  type: string
                type: array
              ibuSpec:
                description: ImageBasedUpgradeSpec defines the desired state of ImageBasedUpgrade
                properties:
                  autoRollbackOnFailure:
                    description: |-
                      AutoRollbackOnFailure defines automatic rollback settings if the upgrade fails or if the upgrade does not
                      complete within the specified time limit.
                    properties:
                      initMonitorTimeoutSeconds:
                        description: |-
                          InitMonitorTimeoutSeconds defines the time frame in seconds. If not defined or set to 0, the default value of
                          1800 seconds (30 minutes) is used.
                        minimum: 0
                        type: integer
                    type: object
                  extraManifests:
                    description: |-
                      ExtraManifests defines the list of ConfigMap resources that contain the user-specific extra manifests to be
                      applied during the upgrade post-pivot stage.
                      Users can also add their custom catalog sources that may want to retain after the upgrade.
                    items:
                      description: ConfigMapRef defines a reference to a config map
                      properties:
                        name:
                          type: string
                        namespace:
                          type: string
                      required:
                      - name
                      - namespace
                      type: object
                    type: array
                  oadpContent:
                    description: OADPContent defines the list of ConfigMap resources
                      that contain the OADP Backup and Restore CRs.
                    items:
                      description: ConfigMapRef defines a reference to a config map
                      properties:
                        name:
                          type: string
                        namespace:
                          type: string
                      required:
                      - name
                      - namespace
                      type: object
                    type: array
                  seedImageRef:
                    description: SeedImageRef defines the seed image and OCP version
                      for the upgrade
                    properties:
                      image:
                        description: Image defines the full pull-spec of the seed
                          container image to use.
                        minLength: 1
                        pattern: ^([a-z0-9]+://)?[\S]+$
                        type: string
                      pullSecretRef:
                        description: PullSecretRef defines the reference to a secret
                          with credentials to pull container images.
                        properties:
                          name:
                            type: string
                        required:
                        - name
                        type: object
                      version:
                        description: Version defines the target platform version.
                          The value must match the version of the seed image.
                        type: string
                    type: object
                  stage:
                    description: ImageBasedUpgradeStage defines the type for the IBU
                      stage field
                    enum:
                    - Idle
                    - Prep
                    - Upgrade
                    - Rollback
                    type: string
                type: object
              rolloutStrategy:
                description: RolloutStrategy defines how to rollout ibu
                properties:
                  maxConcurrency:
                    type: integer
                  timeout:
                    default: 240
                    type: integer
                required:
                - maxConcurrency
                type: object
            required:
            - actions
            - ibuSpec
            type: object
          status:
            description: ImageBasedGroupUpgradeStatus is the status field for ImageBasedGroupUpgrade
            properties:
              clusters:
                items:
                  description: ClusterState defines the current state of a cluster
                  properties:
                    completedActions:
                      items:
                        description: ActionMessage defines the action and its message
                        properties:
                          action:
                            type: string
                          message:
                            type: string
                        required:
                        - action
                        type: object
                      type: array
                    currentAction:
                      description: ActionMessage defines the action and its message
                      properties:
                        action:
                          type: string
                        message:
                          type: string
                      required:
                      - action
                      type: object
                    failedActions:
                      items:
                        description: ActionMessage defines the action and its message
                        properties:
                          action:
                            type: string
                          message:
                            type: string
                        required:
                        - action
                        type: object
                      type: array
                    name:
                      type: string
                  required:
                  - name
                  type: object
                type: array
              completedAt:
                format: date-time
                type: string
              conditions:
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource.\n---\nThis struct is intended for
                    direct use as an array at the field path .status.conditions.  For
                    example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the
                    observations of a foo's current state.\n\t    // Known .status.conditions.type
                    are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                    +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t
                    \   // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                    \   // other fields\n\t}"
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: |-
                        type of condition in CamelCase or in foo.example.com/CamelCase.
                        ---
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                        useful (see .node.status.conditions), the ability to deconflict is important.
                        The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                format: int64
                type: integer
              startedAt:
                format: date-time
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions: null
